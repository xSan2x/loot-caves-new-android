[
  {
    "Id": "821715",
    "ThreadId": "351715",
    "Html": "\r\n<p>As mentioned before, we are building a calculation unit that has the formulas stored externally, so ALL evaluation is done with EvaluateOptions.IterateParameters, since almost all the time, they will be using atleast 1 dataset.&nbsp; If you use EvaluateOptions.IterateParameters,\r\n e.Evaluate() will NOT return a result unless you have atleast one parameter set as an IEnumerable.</p>\r\n<p>So, this works (from the unit tests):</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>            <span style=\"color:blue\">var</span> e = <span style=\"color:blue\">new</span> Expression(<span style=\"color:#a31515\">&quot;x * x&quot;</span>, EvaluateOptions.IterateParameters);\r\n            e.Parameters[<span style=\"color:#a31515\">&quot;x&quot;</span>] = <span style=\"color:blue\">new</span> [] { 0, 1, 2, 3, 4 };\r\n\r\n            <span style=\"color:blue\">var</span> result = (IList)e.Evaluate();\r\n\r\n            Assert.AreEqual(0, result[0]);\r\n            Assert.AreEqual(1, result[1]);\r\n            Assert.AreEqual(4, result[2]);\r\n            Assert.AreEqual(9, result[3]);\r\n            Assert.AreEqual(16, result[4]);\r\n\r\n</pre>\r\n</div>\r\n<p>And this works:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>            <span style=\"color:blue\">var</span> e = <span style=\"color:blue\">new</span> Expression(<span style=\"color:#a31515\">&quot;x &#43; y&quot;</span>, EvaluateOptions.IterateParameters);\r\n            e.Parameters[<span style=\"color:#a31515\">&quot;x&quot;</span>] = <span style=\"color:blue\">new</span>[] { 0, 1, 2, 3, 4 };\r\n            e.Parameters[<span style=\"color:#a31515\">&quot;y&quot;</span>] = 2;\r\n\r\n            <span style=\"color:blue\">var</span> result = (IList)e.Evaluate();\r\n\r\n            Assert.AreEqual(2, result[0]);\r\n            Assert.AreEqual(3, result[1]);\r\n            Assert.AreEqual(4, result[2]);\r\n            Assert.AreEqual(5, result[3]);\r\n            Assert.AreEqual(6, result[4]);\r\n\r\n</pre>\r\n</div>\r\n<p>and this works:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>            <span style=\"color:blue\">var</span> e = <span style=\"color:blue\">new</span> Expression(<span style=\"color:#a31515\">&quot;y&quot;</span>, EvaluateOptions.IterateParameters);\r\n            e.Parameters[<span style=\"color:#a31515\">&quot;y&quot;</span>] = <span style=\"color:blue\">new</span>[] { 2 };\r\n\r\n            <span style=\"color:blue\">var</span> result = (IList)e.Evaluate();\r\n\r\n            Assert.AreEqual(2, result[0]);\r\n\r\n</pre>\r\n</div>\r\n<p>But this doesn't (as you would expect, and this is specifically trapped for and throws the &quot;When IterateParameters option is used, IEnumerable parameters must have the same number of items&quot; exception):</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>            <span style=\"color:blue\">var</span> e = <span style=\"color:blue\">new</span> Expression(<span style=\"color:#a31515\">&quot;x &#43; y&quot;</span>, EvaluateOptions.IterateParameters);\r\n            e.Parameters[<span style=\"color:#a31515\">&quot;x&quot;</span>] = <span style=\"color:blue\">new</span>[] { 0, 1, 2, 3, 4 };\r\n            e.Parameters[<span style=\"color:#a31515\">&quot;y&quot;</span>] = <span style=\"color:blue\">new</span>[] { 2 };\r\n\r\n            <span style=\"color:blue\">var</span> result = (IList)e.Evaluate();\r\n\r\n            Assert.AreEqual(2, result[0]);\r\n            Assert.AreEqual(3, result[1]);\r\n            Assert.AreEqual(4, result[2]);\r\n            Assert.AreEqual(5, result[3]);\r\n            Assert.AreEqual(6, result[4]);</pre>\r\n</div>\r\n<p>And unfortunately this also does NOT work, and does NOT throw an exception (well, actually accessing the result throws one, but NCalc does not).&nbsp; It simply returns a blank dataset:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>            <span style=\"color:blue\">var</span> e = <span style=\"color:blue\">new</span> Expression(<span style=\"color:#a31515\">&quot;y&quot;</span>, EvaluateOptions.IterateParameters);\r\n            e.Parameters[<span style=\"color:#a31515\">&quot;y&quot;</span>] = 2;\r\n\r\n            <span style=\"color:blue\">var</span> result = (IList)e.Evaluate();\r\n\r\n            Assert.AreEqual(2, result[0]);\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;What would be nice, is if the Expression.Evaluate() method would still return the value 2, either as an IEnumerable (length 1) or a single value.</p>\r\n",
    "PostedDate": "2012-04-09T14:26:25.96-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]