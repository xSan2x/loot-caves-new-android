[
  {
    "Id": "477813",
    "ThreadId": "222855",
    "Html": "<p>I have a function</p>\r\n<p>in(MyCountry, 'IE','UK','DE','ES')</p>\r\n<p>which works fine.</p>\r\n<p>However if I replace the country list with a variable, e.g.</p>\r\n<p>in(MyCountry, CountryList)</p>\r\n<p>and use the code</p>\r\n<p>Expression ex = new Expression(&quot;in(MyCountry, CountryList)&quot;, EvaluateOptions.IgnoreCase | EvaluateOptions.NoCache);</p>\r\n<p>ex.EvaluateParameter += delegate(String name, NCalc.ParameterArgs arg) { arg.Result = GetValue(name); };</p>\r\n<p>and GetValue(&quot;CountryList&quot;) returns&nbsp;'IE','UK','DE','ES' then it does not work</p>\r\n<p>Any ideas?</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-08-08T14:04:40.683-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "480605",
    "ThreadId": "222855",
    "Html": "<p>Here's the code:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> EvaluateArgument(String name, NCalc.ParameterArgs arg)\r\n        {\r\n            <span style=\"color:blue\">if</span>(name == <span style=\"color:#a31515\">&quot;EU&quot;</span>)\r\n                arg.Result = <span style=\"color:#a31515\">&quot;1,2,3,4&quot;</span>;\r\n        }\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">object</span> Evaluate(<span style=\"color:blue\">string</span> expression)\r\n        {\r\n            Expression ex = <span style=\"color:blue\">new</span> Expression(expression, EvaluateOptions.IgnoreCase | EvaluateOptions.NoCache);\r\n            ex.EvaluateParameter += EvaluateArgument;\r\n            <span style=\"color:blue\">return</span> ex.Evaluate();\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> button1_Click_1(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n        {\r\n            tbRes.Text = Evaluate(&quot;in(1,EU)&quot;).ToString();\r\n        }\r\n\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-08-14T14:58:05.443-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "480695",
    "ThreadId": "222855",
    "Html": "<p>Hey,</p>\r\n<p>the problem relates to the way that &quot;1,2,3,4&quot; is treated as a string and not an array within NCalc.</p>\r\n<p>I don't think that arrays are something NCalcs supports. (i dont see it in the grammar)</p>\r\n<p>this together with the equality comparision used within the &quot;in&quot; function mean that &quot;1&quot;!=&quot;1,2,3,4&quot;</p>\r\n<p>the solution is either to get NCalc to support arrays (means regenerating the grammar and changing some inner workings) or to change how the in function works:</p>\r\n<p>if you search the codebase for &quot; <span style=\"color:blue\">#region</span>&nbsp;In&quot;</p>\r\n<p>then change this:&nbsp; (&nbsp;note that we can't just use .Contains here as we do not know the type of either argument)</p>\r\n<p><span style=\"color:green\">//&nbsp;Goes&nbsp;through&nbsp;any&nbsp;values,&nbsp;and&nbsp;stop&nbsp;when&nbsp;one&nbsp;is&nbsp;found</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">for</span>&nbsp;(<span style=\"color:blue\">int</span>&nbsp;i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;&nbsp;function.Expressions.Length;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">object</span>&nbsp;argument&nbsp;=&nbsp;evaluator.Evaluate(function.Expressions[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">if</span>&nbsp;(evaluator.CompareUsingMostPreciseType(parameter,&nbsp;argument)&nbsp;==&nbsp;0)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evaluation&nbsp;=&nbsp;<span style=\"color:blue\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">break</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>\r\n<p>to this (you might need to reference system.linq)</p>\r\n<pre style=\"font-family:consolas\"><span style=\"color:green\">//&nbsp;Goes&nbsp;through&nbsp;any&nbsp;values,&nbsp;and&nbsp;stop&nbsp;when&nbsp;one&nbsp;is&nbsp;found</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">for</span>&nbsp;(<span style=\"color:blue\">int</span>&nbsp;i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;&nbsp;function.Expressions.Length;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">object</span>&nbsp;argument&nbsp;=&nbsp;evaluator.Evaluate(function.Expressions[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">string</span>&nbsp;stringargument&nbsp;=&nbsp;argument&nbsp;<span style=\"color:blue\">as</span>&nbsp;<span style=\"color:blue\">string</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">if</span>&nbsp;(stringargument&nbsp;!=&nbsp;&nbsp;<span style=\"color:blue\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">if</span>&nbsp;(stringargument.Split(<span style=\"color:blue\">new</span>[]&nbsp;{<span style=\"color:#a31515\">','</span>}).Any(arg&nbsp;=&gt;&nbsp;evaluator.CompareUsingMostPreciseType(parameter,&nbsp;arg)&nbsp;==&nbsp;0))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evaluation&nbsp;=&nbsp;<span style=\"color:blue\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">break</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span style=\"color:blue\">else</span>&nbsp;<span style=\"color:blue\">if</span>&nbsp;(evaluator.CompareUsingMostPreciseType(parameter,&nbsp;argument)&nbsp;==&nbsp;0)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evaluation&nbsp;=&nbsp;<span style=\"color:blue\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">break</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br></pre>\r\n<p>you will get the answer you expect.&nbsp; Note that this doesn't currently allow you to emply expressions within the string you pass eg &quot;1+1,2+3,4,5&quot; but it'd not be hard to add.</p>\r\n<p>David</p>",
    "PostedDate": "2010-08-15T06:39:51.493-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]