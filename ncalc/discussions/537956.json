[
  {
    "Id": "1219180",
    "ThreadId": "537956",
    "Html": "Since <code>System.Drawing.Color</code> and <code>System.Windows.Media.Color</code> both have arithmetic operators defined, please consider adding it to build in datatypes; so we can evaluate expressions like <code>#fff * #eee - (#ddee55 / #911222)</code>. The color codes and color names tokens can be resolved to RGB using <code>System.Drawing.ColorTranslator.FromHtml(&quot;lightblue&quot;)</code>.<br />\n<br />\nThe interoperability between System.Windows.Media.Color and System.Drawing.Color is safely possible via RGB.<br />\n<br />\nMore complicated expression would be if it involve numeric, e.g. <code>#fffddd - 5</code>, which should subtract 5 from all three tones individually Color.R - 5, Color.G - 5 and Color.B = 5.<br />\n<br />\nCurrently, the operator doesn't support numeric signatures: <a href=\"https://connect.microsoft.com/VisualStudio/feedback/details/828056/colormath-system-windows-media-color-and-system-drawing-color-to-have-operators-accepting-numeric\" rel=\"nofollow\">https://connect.microsoft.com/VisualStudio/feedback/details/828056/colormath-system-windows-media-color-and-system-drawing-color-to-have-operators-accepting-numeric</a><br />\n<br />\nWithout having those mixed operators, one approach could be to normalize all tokens to hex triplet <code>#XXXXX</code> or <code>#XXX</code> if applicable:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">using</span> System.Drawing;\n...\n...\n\n<span style=\"color:Blue;\">var</span> color = ColorTranslator.FromHtml(token);\n\n<span style=\"color:Blue;\">if</span>(color == <span style=\"color:Blue;\">null</span>)\n{\n    <span style=\"color:Blue;\">int</span> num;\n    <span style=\"color:Blue;\">if</span>(!<span style=\"color:Blue;\">int</span>.TryParse(token, <span style=\"color:Blue;\">out</span> num))\n        <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">null</span>; <span style=\"color:Green;\">// the token is not a number</span>\n\n    <span style=\"color:Green;\">// Each channel shouldn&#39;t be greater than FF (255)</span>\n    num = (num &gt; 255) ? 255 : num; \n\n                 <span style=\"color:Green;\">// will convert to short code as well (e.g. #fff),</span>\n                 <span style=\"color:Green;\">// or X2 for strictly six digits (#ffffff)</span>\n    <span style=\"color:Blue;\">var</span> str = num.ToString(<span style=\"color:#A31515;\">&quot;X&quot;</span>);\n    str = <span style=\"color:Blue;\">string</span>.Format(CultureInfo.CurrentCulture, <span style=\"color:#A31515;\">&quot;#{0}{0}{0}&quot;</span>, str);\n\n    color = ColorTranslator.FromHtml(str);                  \n}\n\n<span style=\"color:Blue;\">if</span>(color == <span style=\"color:Blue;\">null</span>)\n    <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">null</span>; <span style=\"color:Green;\">// The token is neither number nor known color</span>\n    \n<span style=\"color:Green;\">// Now do something with the normalized to color token</span>\r\n</pre></div>OAN, is this project dead? No release since 2011 .... on CodePlex or Nuget. <br />\n",
    "PostedDate": "2014-03-04T12:32:18.17-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]