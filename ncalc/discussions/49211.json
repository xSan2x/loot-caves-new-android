[
  {
    "Id": "164477",
    "ThreadId": "49211",
    "Html": "Hi Sébastien,<br>\r\n<br>\r\nI'm using your framework for an internal project and I'm very happy with it.<br>\r\n<br>\r\nI just have one question:<br>\r\n<br>\r\nI created a custom function, and inside that fucntion, I want to know its parameter's name.<br>\r\n<br>\r\nI get <strong>all registered parameters</strong> but not the <strong>function parameters</strong>.<br>\r\n<br>\r\nSuppose this expression: <br>\r\n<br>\r\nExpression expression = new Expression(&quot;MyFunction(p1) + p2 + p3 + p4 + p5&quot;);<br>\r\n<br>\r\nSo I have to register them:<br>\r\n<br>\r\nexpression.Parameter[&quot;p1&quot;] = 1;<br>\r\nexpression.Parameter[&quot;p2&quot;] = 2; <br>\r\n...<br>\r\n<br>\r\nAnd my custom function:<br>\r\n<br>\r\nexpression.EvaluateFunction += ...<br>\r\n<br>\r\nSo, inside my custom function, I can't get the name of its parameter. (Is it p1? p2?)<br>\r\n<br>\r\nvoid MyFunction(FunctionArgs args) {<br>\r\n    Expression ex = args.Parameters[0];<br>\r\n    //what's the name (string) of args.Parameters[0] ??? I need to know in my function...<br>\r\n    //if I try &quot;ex.Parameters&quot; I get ALL registered parameters (p1, p2, p3...)<br>\r\n}<br>\r\n<br>\r\nIs there a way to get the string &quot;p1&quot; (in this case) inside my custom function?<br>\r\n<br>\r\nThank you in advance,<br>\r\n<br>\r\nAndré Carlucci<br>\r\n",
    "PostedDate": "2009-03-04T11:53:15.31-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "164668",
    "ThreadId": "49211",
    "Html": "Hi André,<br>\r\n<br>\r\nThere is no way to get the name used as the functions arguments for a really simple reason, parameters don't have names. You are actually using here only one of the several ways to pass values as arguments.<br>\r\n<br>\r\nFor example, what would be the name of the arguments in this case :<br>\r\n<br>\r\nnew Expression(&quot;MyFunction(1, a, a+b, a+2, Round(a+2))&quot;);<br>\r\n<br>\r\n1 -&gt; ????<br>\r\na -&gt; ok ;) what you use<br>\r\na+b -&gt; ?<br>\r\na+2 -&gt; ?<br>\r\n...<br>\r\n<br>\r\nYou see, we can have very complex stuff in function's arguments, so we can't define a name for this.<br>\r\n<br>\r\nFunction can just get the values or expressions passed as arguments. And they can just access these values. Exactly like normal C# methods, in such you know the values, not the name of the parameter that was used to set it.<br>\r\n<br>\r\nWatch this example:<br>\r\n<br>\r\npublic void MyFunction(object a, object b)<br>\r\n{<br>\r\n  // do stuf<br>\r\n}<br>\r\n<br>\r\nIf I call it like that:<br>\r\n<br>\r\nvar myName = 5;<br>\r\nMyFunction(1+2, myName);<br>\r\n<br>\r\nDo you think you can get &quot;myName&quot; frrom MyFunction ? If you have the answer for C# you have the answer for NCalc.<br>\r\n<br>\r\nYou should really think about arguments as a defined number of ordered values to process a function, simply.<br>\r\n<br>\r\nMoreover, I have checked and in the args.Parameters[] you really get only the arguments in the so called function. If not please send me a working example.<br>\r\n<br>\r\nCheers,<br>\r\nSébastien<br>\r\n",
    "PostedDate": "2009-03-04T23:42:27.217-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "165317",
    "ThreadId": "49211",
    "Html": "<p>Hi Sébastien,<br>\r\n<br>\r\nThanks a lot for your quick answer. You are totally right.<br>\r\n<br>\r\nIn fact, sorry about my dumb question, I should have thought 10s before impulsively posting ;)</p>\r\n<p>Anyway, I would like to suggest some features to NCalc. See if you like:<br>\r\n<br>\r\n<strong>- A public method for equation parsing (returns bool). <br>\r\n</strong>Sometimes it's good know if the expression is correct before executing it (it saves a lot of execution time!).<br>\r\n<br>\r\n<strong>- A public getter (string) for the parsedExpression when on custom functions</strong><br>\r\nI'm using complex functions as user supplied functions and some of them are very slow. To speed things up, I would like to cache some results (it makes sense only in some cases). To do that, I need the context. Ex:<br>\r\n<br>\r\nMyFunction(OtherFunction(a + b * 3, c) + 1)<br>\r\n<br>\r\nWhen executing &quot;OtherFunction&quot;, I would like to have the access to the strings &quot;a + b * 3&quot; and &quot;c&quot;. It's there already, but the property parsedExpression is protected.<br>\r\n<br>\r\n<strong>- Replace existing functions<br>\r\n</strong>I would like to change the behavior, number of parameters, etc.. of the the existing functions. Ex: write my own Sum or Max function or simply remove them.<br>\r\n<br>\r\nWell, that's it. Thanks a lot for this great project.<br>\r\n<br>\r\nCheers,<br>\r\nAndré<br>\r\n</p>\r\n",
    "PostedDate": "2009-03-06T05:43:21.897-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "173826",
    "ThreadId": "49211",
    "Html": "Hi guys,<br>\r\nSébastien thanks for good work.<br>\r\n<br>\r\ni join André in his feature requests:<br>\r\n<br>\r\n<br>\r\n<strong>- A public method for equation parsing (returns bool). </strong><br>\r\n<br>\r\nThis is must have for GUI usage. For example I do excel like application, I would like to validate formula before accepting it.<br>\r\nWhat I do in this case, is to run normal formula execution via Evaluate wrapped in try-except block. What would be nice, is to have a function for example Validate, which would work exactly like Evaluate, but would not raise exceptions and return true/false.<br>\r\n<br>\r\nOther 2 requests are also valid ones.<br>\r\n<br>\r\nAlso i would like to ask for one more feature.<br>\r\n<br>\r\nAs I understand most of the time is taken by parsing of the formula. <br>\r\nWhat often people have are similar formulas with different parameters. So what would be nice if one could do the following:<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var exp = new Expression(formula);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exp.EvaluateParameter += delegate(string name, ParameterArgs args, Object externalParameter )<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; args.Result = (myType) externalParameter.getMember(name);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };<br>\r\n<br>\r\n&nbsp;&nbsp; for (int i = 0; i &lt; similarObjectsList.Length; i++)<br>\r\n&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; myType val=similarObjectsList[i];<br>\r\n&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; val.Answer=exp.Evaluate(val)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\nBasically be able, to parse the same formula, against different objects.<br>\r\nThis way formula could be parsed once and reused for many times.<br>\r\n<br>\r\nThanks.<br>\r\nHuseyn<br>\r\n",
    "PostedDate": "2009-03-31T03:05:37.06-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]