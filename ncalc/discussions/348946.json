[
  {
    "Id": "811624",
    "ThreadId": "348946",
    "Html": "\r\n<p>Correct me if I am wrong, but if you use EvaluateOptions.IterateParameters, then you cannot use e.EvaluateParameters, you have to set them prior to calling e.Evaluate().</p>\r\n<p>I don't know if that would solve my problem or not, but something I noticed.</p>\r\n<p>I have a need for a custom function that takes an IEnumerable parameter as an input.&nbsp; I thought I could fake this out by converting my number array to a string, but in all my testing so far, no matter what I try to set the parameter value to, it sends\r\n each &amp; every character or value to the EvaluateFunction delagate individually.</p>\r\n<p>We always need to Evaluate with EvaluateOptions.IterateParameters, because that's 99% of what we want to do.&nbsp; The forumlas are externally configured and our evaluations need to be totally generic, based soly on parameter &amp; funciton names, so I can't\r\n sometimes use it and sometimes not.&nbsp; Also, I want to do it both ways in the same formula.</p>\r\n<p>here's a ver simple example of what we could have:</p>\r\n<p>(MyFunc([a]) &#43; [b]) / [c]</p>\r\n<p>where [a] &amp; [c] are IEnumerables of the same (but unknown) length.&nbsp; [b] is a singular value.&nbsp; In my case, MyFunc() is trying to find the Max value of the array (so I can't use the native Max(a,b) ).</p>\r\n<p>MyFunc(1, 2, 3, 4, 5) - works. the 1, 2, 3, 4, 5 is sent in as a single&nbsp;iEnumerable length 5.</p>\r\n<p>MyFunc(1, 2, 3, 4, 5) &#43; [a] - also works</p>\r\n<p>MyFunc([a]) - and setting [a] to the string &quot;1, 2, 3, 4, 5&quot; sends '1', then ',', then ' ', etc.&nbsp; If I set it to &quot;'1, 2, 3, 4, 5&nbsp;'&quot;, then I get the same thing, but with a single quote first.</p>\r\n<p>I get why if I try to send it an IEnumberable of numbers it sends each one individually to the EvaluateFunction delegate (that's what the option says to do), but I don't get the string.&nbsp; Why is each character sent seperately as if it were an IEnumerable\r\n of char (which I guess it is, but would I really want to treat ti that way?) Is there a work around?</p>\r\n<div id=\"_mcePaste\" style=\"width:1px; height:1px; overflow:hidden; top:0px; left:-10000px\">\r\n&#65279;</div>\r\n",
    "PostedDate": "2012-03-16T12:40:11.087-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]