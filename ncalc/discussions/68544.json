[
  {
    "Id": "233164",
    "ThreadId": "68544",
    "Html": "<p>Ahhhh ..... great!<br><br>I just see two problems right now. <br>1.) Eaven if an Expression &quot;is iterated&quot;, the EvaluateParameter Event should be rissen -&gt; but only once, at first time Call.<br><br>2.) And this is a real puzzle ... We must define if a Function-Result is used as array and iterated, or if the function parameters <br>have to be iterated. The best would be if you could do this per Function instead of per Expression. There is one simple reason: <br>you cannot calculate aggregation-functions (i.e. moving averages) with single values, you must use a function taking arrays and <br>returning arrays. On the other hand you have functions like Math (sin, tan, ...) where you need single values. Not easy hu? <br>Maybe NCalc must use two different kind of brackets for beeing array threated or not?<br><br>i.e. <br><br>public Double[] Foo(Double[] inA, Double[] inB) {return (Double[]) inA.Clone(); } <br>public Double Bar(Double inA, Double inB) {return (inA + inB); } <br><br>new Expression(&quot;Foo([a], [b]) * 2&quot;, Options.Iterate)&nbsp; // -&gt; iterate function result array <br>new Expression(&quot;Bar({c}, {d}) * 2 &quot;, Options.Iterate) // -&gt; iterate function paramters <br><br>But what to do if Bar is used as parameter for Foo? Or vice versa?<br><br>new Expression(&quot;Foo( [a], Bar({c}, {d}) ) * 2&quot;, Options.Iterate) <br>so you have to iterate each c and d pass to function bar and do all the bar results as array-parameter for function Foo. <br>Now this is where i got stuck im my current &quot;workaround&quot; solution. And today I have not solved the subfunction issue:<br>new Expression(&quot;Foo(Foo([a])^3)&quot;);<br><br><br>One solution could be that every function is threated as a new single expression, and passed back the same way a parameter does.<br>You have to do this recoursvly. <br><br>i.e.: <br>Expression(&quot;[Foo( [Foo( [1] ) ] + 3 )] * 2&quot;, Options.Iterate);<br>-&gt; parameter = Foo([Foo([1])] + 3]) <br>&nbsp;&nbsp; -&gt; new expression, iterating<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; parameter = Foo([1]) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; new expression, no iterating because its only one function<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;- = double[]&nbsp; &nbsp;<br>&nbsp;&nbsp; &lt;- double[] + 3 = double[] <br>&lt;- double[] * 2 = double[] <br><br>so i stared to play with unix shell like signs to mark weather its a normal parameter or a function<br>&quot;[`Foo( [`Foo( [1] ) &acute;] + 3 )&acute;] * 2&quot;, <br><br>&nbsp;param 1 `Foo( [`Foo( [1] ) &acute;] + 3 )&acute; // -&gt; Containes more `&acute;-expressions -&gt; iterate = ture<br>&nbsp;param 2 `Foo( [1] ) &acute;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // -&gt; no more `&acute;, do not iterate<br><br>I hope I could show you my Problems :-)<br><br>Chris</p>",
    "PostedDate": "2009-09-10T09:07:26.317-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "233169",
    "ThreadId": "68544",
    "Html": "<p>Ok, here is a prototype how you can work with this issue:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\"><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Linq;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n<span style=\"color:Blue\">using</span> System.Text.RegularExpressions;\r\n<span style=\"color:Blue\">using</span> Evaluant.Calculator;\r\n\r\n<span style=\"color:Blue\">namespace</span> NCalcTest2\r\n{\r\n    <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> Expr\r\n    </span>{\r\n        <span style=\"color:Blue\">private</span> Dictionary&lt;String,Object&gt; pList = <span style=\"color:Blue\">new</span> Dictionary&lt;String,Object&gt;();\r\n        <span style=\"color:Blue\">private</span> String exprStr;\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> Regex regex = <span style=\"color:Blue\">new</span> Regex(<span style=\"color:#A31515\">&quot;`[^`&acute;]*&acute;&quot;</span>);\r\n\r\n        <span style=\"color:Blue\">public</span> Expr(String exprStr, <span style=\"color:Blue\">params</span> Object[] parameters) \r\n        {\r\n            <span style=\"color:Blue\">this</span>.exprStr = exprStr;\r\n\r\n            <span style=\"color:Green\">//1.) Convert Array to Liste</span>\r\n            <span style=\"color:Blue\">for</span>(<span style=\"color:Blue\">int</span> i=0;i&lt;parameters.Length;i++)\r\n                <span style=\"color:Blue\">this</span>.pList[i.ToString()] = parameters[i]; \r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> Expression NewExpression(String exprStr, Boolean iterate)\r\n        {\r\n            Expression e;\r\n\r\n            <span style=\"color:Blue\">if</span> (iterate)\r\n                e = <span style=\"color:Blue\">new</span> Expression(exprStr,EvaluateOptions.IterateParameters);\r\n            <span style=\"color:Blue\">else</span>\r\n                e = <span style=\"color:Blue\">new</span> Expression(exprStr);\r\n\r\n            e.Parameters = pList;\r\n            AddFunctionHandler(e);\r\n            <span style=\"color:Blue\">return</span> e; \r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> Object[] Evaluate()\r\n        {\r\n            Expression e;\r\n\r\n            <span style=\"color:Blue\">while</span> (regex.IsMatch(exprStr))\r\n            {\r\n                String arrFunc = regex.Match(exprStr).Value.Trim(<span style=\"color:#A31515\">'`'</span>,<span style=\"color:#A31515\">'&acute;'</span>);\r\n                Console.WriteLine(arrFunc);\r\n\r\n                e = NewExpression(arrFunc, <span style=\"color:Blue\">false</span>);\r\n                \r\n                String parIndex = pList.Count().ToString();\r\n                pList.Add(parIndex, e.Evaluate());\r\n                exprStr = regex.Replace(exprStr, String.Format(<span style=\"color:#A31515\">&quot;[{0}]&quot;</span>, parIndex));\r\n            }\r\n\r\n            <span style=\"color:Green\">//Just debugging Stuff</span>\r\n            Console.WriteLine(exprStr);\r\n            <span style=\"color:Blue\">foreach</span> (KeyValuePair&lt;String, Object&gt; pair <span style=\"color:Blue\">in</span> pList)\r\n            {\r\n                String val = <span style=\"color:#A31515\">&quot;&quot;</span>;\r\n                <span style=\"color:Blue\">if</span> (pair.Value.GetType().IsArray)\r\n                    <span style=\"color:Blue\">foreach</span> (Object vArr <span style=\"color:Blue\">in</span> (Array)pair.Value)\r\n                        val += vArr.ToString() + <span style=\"color:#A31515\">&quot;,&quot;</span>;\r\n                <span style=\"color:Blue\">else</span>\r\n                    val = pair.Value.ToString();\r\n\r\n                Console.WriteLine(<span style=\"color:#A31515\">&quot;{0} : {1}&quot;</span>, pair.Key, val);\r\n            }\r\n\r\n            e = NewExpression(exprStr, <span style=\"color:Blue\">true</span>);\r\n            Object result = e.Evaluate();\r\n            List&lt;Object&gt; oList = (List&lt;Object&gt;)result;\r\n            Console.WriteLine(<span style=\"color:#A31515\">&quot;{0} : {1}&quot;</span>, result.ToString(), oList.Count);\r\n\r\n            <span style=\"color:Blue\">foreach</span> (<span style=\"color:Blue\">var</span> o <span style=\"color:Blue\">in</span> oList)\r\n                Console.WriteLine(o.ToString());\r\n            <span style=\"color:Green\">//End of debugging stuff</span>\r\n\r\n            <span style=\"color:Blue\">return</span> oList.ToArray() ;\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> AddFunctionHandler(Expression e)\r\n        {\r\n            e.EvaluateFunction += <span style=\"color:Blue\">delegate</span>(String name, FunctionArgs args)\r\n            {\r\n                Console.WriteLine(<span style=\"color:#A31515\">&quot;Function = {0}&quot;</span>, name);\r\n                <span style=\"color:Blue\">if</span> (name == <span style=\"color:#A31515\">&quot;foo&quot;</span> || name == <span style=\"color:#A31515\">&quot;Foo&quot;</span>)\r\n                {\r\n                    Object[] parameters = <span style=\"color:Blue\">new</span> Object[args.Parameters.Length];\r\n                    <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> j = 0; j &lt; parameters.Length; j++)\r\n                    {\r\n                        String exp = args.Parameters[j].ParsedExpression.ToString();\r\n                        <span style=\"color:Blue\">if</span>(ExpressionHasFunction(exp))\r\n                            parameters[j] = IListToArr(((IList)NewExpression(exp, <span style=\"color:Blue\">true</span>).Evaluate()));\r\n                        <span style=\"color:Blue\">else</span> \r\n                            parameters[j] = args.Parameters[0].Evaluate();\r\n                    }\r\n                    \r\n                    { }\r\n                    args.Result = FooFunction((Double[]) parameters[0]);\r\n                }\r\n                <span style=\"color:Blue\">else</span> <span style=\"color:Blue\">if</span> (name == <span style=\"color:#A31515\">&quot;bar&quot;</span> || name == <span style=\"color:#A31515\">&quot;Bar&quot;</span>)\r\n                {\r\n                    Object[] parameters = <span style=\"color:Blue\">new</span> Object[args.Parameters.Length];\r\n                    <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> j = 0; j &lt; parameters.Length; j++)\r\n                    {\r\n                        String exp = args.Parameters[j].ParsedExpression.ToString();\r\n                        parameters[j] = NewExpression(exp ,<span style=\"color:Blue\">false</span>).Evaluate();\r\n                        Console.WriteLine(<span style=\"color:#A31515\">&quot;Bar = {0}&quot;</span>, parameters[j]);\r\n                    }\r\n                    \r\n                    args.Result = BarFunction(\r\n                        Convert.ToDouble(parameters[0]),\r\n                        Convert.ToDouble(parameters[1]));\r\n                }\r\n            };\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> Double[] FooFunction(Double[] inArr)\r\n        {\r\n            Double[] result = (Double[])inArr.Clone();\r\n            <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; result.Length; i++)\r\n            {\r\n                result[i] += 2;\r\n            }\r\n\r\n            <span style=\"color:Blue\">return</span> result;\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> Double BarFunction(Double a, Double b)\r\n        {\r\n            <span style=\"color:Blue\">return</span> a * b;\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> Boolean ExpressionHasFunction(String expStr)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (regex.IsMatch(expStr)) { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">false</span>; } <span style=\"color:Green\">// just to be on the safe side</span>\r\n\r\n            Expression e = <span style=\"color:Blue\">new</span> Expression(expStr);\r\n            Boolean hasFunction = <span style=\"color:Blue\">false</span>;\r\n\r\n            e.EvaluateFunction += <span style=\"color:Blue\">delegate</span>(String name, FunctionArgs args)\r\n            {\r\n                hasFunction = <span style=\"color:Blue\">true</span>;\r\n            };\r\n\r\n            <span style=\"color:Blue\">try</span>\r\n            {\r\n                e.Evaluate();\r\n            }\r\n            <span style=\"color:Blue\">catch</span> { }\r\n\r\n            <span style=\"color:Blue\">return</span> hasFunction;\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> Object IListToArr(IList iList)\r\n        {\r\n            Array result = Array.CreateInstance(<span style=\"color:Blue\">typeof</span>(Double), iList.Count);\r\n            iList.CopyTo(result,0);\r\n            <span style=\"color:Blue\">return</span> result;\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n</span> <br>And call from Main<br><br>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Linq;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n<span style=\"color:Blue\">using</span> Evaluant.Calculator;\r\n\r\n<span style=\"color:Blue\">namespace</span> NCalcTest2\r\n{\r\n    <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> Program\r\n    </span>{\r\n        <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> Main(<span style=\"color:Blue\">string</span>[] args)\r\n        {\r\n            Double[] a = <span style=\"color:Blue\">new</span> Double[]{1,2,3,4,5};\r\n            Double[] b = <span style=\"color:Blue\">new</span> Double[]{6,7,8,9,10};\r\n            Double c = 3.0;\r\n            <span style=\"color:Green\">//String ex = &quot;`Foo(`Foo([0])&acute;)&acute; * [1]^[2]&quot;;</span>\r\n            <span style=\"color:Green\">//String ex = &quot;`Foo(`Foo([0])&acute;)&acute; * [1]^Bar(2,3)&quot;;</span>\r\n            <span style=\"color:Green\">//String ex = &quot;`Foo(`Foo([0])&acute;)&acute; * [1]^Bar([0],[1])&quot;;</span>\r\n            String ex = <span style=\"color:#A31515\">&quot;`Foo(Bar(1,1))&acute; * [1]^Bar([0],[1])&quot;</span>;\r\n\r\n            Expr e = <span style=\"color:Blue\">new</span> Expr(ex, a, b, c);\r\n            e.Evaluate();\r\n\r\n            Console.ReadKey();\r\n        }\r\n\r\n        \r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Output:</p>\r\n<p>15625<br>78364164096<br>1.91581231380566E+20<br>3.24518553658427E+32<br>5.15377520732011E+47</p>\r\n<p>So there are still some tasks open like Correct Typecasting for functions parameters but I think you can get the clue. Just quote array functions and do not for Math functions.</p>\r\n<p>Chris</p>",
    "PostedDate": "2009-09-10T09:10:43.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]