[
  {
    "Id": "424709",
    "ThreadId": "207580",
    "Html": "<p>Hi S&eacute;bastien,</p>\r\n<p>&nbsp;&nbsp; Firstly a big thankyou for making an excellent utility (I can see it saving me literally weeks of work).<br>&nbsp;&nbsp; <br>I hope to use the expression evaluator to evaluate boolean expressions in a Forest modelling application.</p>\r\n<p><strong>Suggested Enhancements</strong></p>\r\n<p>1. I altered the grammer very slightly in NCalc.g so that identifiers can contain dots (i.e. '.'). For example in my application it would be possible for users to enter an expression of the form:</p>\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp; <em>Tree.height &gt; 50 or Tree.diameter &gt; 100<br></em>&nbsp;&nbsp; <br>&nbsp;&nbsp; This is not a big deal but is more natural way of specifying attributes on a certain entity (i.e. Tree in the example above).</p>\r\n<p>&nbsp;&nbsp; Also it is more consistent with the grammer for NAMES which allows dots (or any character between&nbsp;square brackets).<br>&nbsp;&nbsp; <br>&nbsp;&nbsp; The change to the grammer was :</p>\r\n<p>ID <br>&nbsp;: &nbsp;LETTER (LETTER | DIGIT | '.')*<br>&nbsp;;</p>\r\n<p>Unfortunately I was not able to run the unit tests to verify that I hadn't broken any existing functionality.</p>\r\n<p>The NCalc.Tests didn't seem to be included in the source download - is this intentional?</p>\r\n<p>2. Another enhancement (which I have not made but which would be very useful) is to enhance error handling so that if an expression is invalid it is possibly for a developer to position the cursor on and/or highlight the part of the expression which is in error. Also it would allow the developer to build the error message which is displayed to the user (for example the curent error message includes the line number but in my case the expression is always just a single line so in my cas the line number is unnecessary). Maybe the Error property on the Expression class could return an instance of an error class which in turn has a line number and character number properties (as well as a string error message property). I realise that this is not always possible, but would be very useful when it is.</p>\r\n<p>It would also be great if the EvaluationException class had the same properties.</p>\r\n<p>3. Another nice to have would be if the 'in' function was instead a binary operator so you could write expressions of the form :</p>\r\n<p><em>&nbsp;&nbsp; &nbsp;&nbsp; if( 1 in [1,3,5], true, false )</em></p>\r\n<p>&nbsp;</p>\r\n<p><strong>Possible Bug(s)</strong></p>\r\n<p>The following expressions don't seem to be handled as I would expect:</p>\r\n<p>1. <em>'abc' * 2</em></p>\r\n<p>&nbsp;&nbsp; I get the exception :<br>&nbsp;&nbsp; System.FormatException: Input string was not in a correct format.<br>&nbsp;&nbsp;&nbsp; at System.Number.StringToNumber(String str, NumberStyles options, NumberBuffer&amp; number, NumberFormatInfo info, Boolea&nbsp;n parseDecimal)<br>&nbsp;&nbsp;&nbsp; at System.Number.ParseDecimal(String value, NumberStyles options, NumberFormatInfo numfmt)<br>&nbsp;&nbsp;&nbsp; at System.Decimal.Parse(String s)<br>&nbsp;&nbsp;&nbsp; at NCalc.Numbers.ConvertIfString(Object s) in D:\\NCalc\\Evaluant.Calculator\\Numbers.cs:line 13<br>&nbsp;&nbsp;&nbsp; at NCalc.Numbers.Multiply(Object a, Object b) in D:\\NCalc\\Evaluant.Calculator\\Numbers.cs:line 408<br>&nbsp;&nbsp;&nbsp; at NCalc.Domain.EvaluationVisitor.Visit(BinaryExpression expression) in D:\\NCalc\\Evaluant.Calculator\\Domain\\EvaluationVisitor.cs:line 156<br>&nbsp;&nbsp;&nbsp; at NCalc.Domain.BinaryExpression.Accept(LogicalExpressionVisitor visitor) in D:\\NCalc\\Evaluant.Calculator\\Domain\\BinaryExpression.cs:line 40<br>&nbsp;&nbsp;&nbsp; at NCalc.Expression.Evaluate() in D:\\NCalc\\Evaluant.Calculator\\Expression.cs:line 274<br>&nbsp;&nbsp;&nbsp; at NCalc.Play.Program.Main(String[] mainArgs) in D:\\NCalc\\Evaluant.Calculator.Play\\Program.cs:line 31</p>\r\n<p>&nbsp;I would expect operators which only can be applied to numeric values to detected and an appropriate error message given (ideally identifying the value in error).<br>&nbsp;<br>2. <em>true + 2</em></p>\r\n<p>&nbsp;&nbsp; I get null returned from the Expression.Evaluate() method.</p>\r\n<p>&nbsp;&nbsp; I would expect that an exeption to be thrown as I am mixing incompatible types with the '+'</p>\r\n<p><br>Thanks,<br>Joel.</p>",
    "PostedDate": "2010-03-28T15:28:36.82-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]