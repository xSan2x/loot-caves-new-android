[
  {
    "Id": "1236921",
    "ThreadId": "543025",
    "Html": "Hi all,\r<br />\nI've found this strange behaviour of the evaluation engine:<br />\n<pre><code>\n    public Sub doTest()\n        Dim exp As Expression = New Expression(&quot;Min(6, 0.33 + 1.8)&quot;)\n        Debug.Print(exp.Evaluate)\n        Dim exp2 As Expression = New Expression(&quot;Min(0.33 + 1.8 , 6)&quot;)\n        Debug.Print(exp2.Evaluate)\n    End Sub</code></pre>\n\nthe result is:\r<br />\n Information: 0 : Expression added to cache: Min(6, 0.33 + 1.8)\r<br />\n<strong>2</strong>\r<br />\n Information: 0 : Expression added to cache: Min(0.33 + 1.8 , 6)\r<br />\n<strong>2,13</strong>\r<br />\n<br />\nAny idea?<br />\n",
    "PostedDate": "2014-04-23T01:13:33.923-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1244385",
    "ThreadId": "543025",
    "Html": "Hi,<br />\n<br />\nYou need to perform the &quot;cast&quot; individually for each parameter. <br />\n<br />\nTo fix the problem, change the &quot;Min&quot; routine in &quot;Numbers.cs&quot; as follows:<br />\n<pre><code>            switch (typeCodeA)\n            {\n                case TypeCode.Byte:\n                    switch (typeCodeB)\n                    {\n                        case TypeCode.Byte:\n                            return Math.Min((Byte) a, (Byte) b);\n                        case TypeCode.SByte:\n                            return Math.Min((Byte) a, (SByte) b);\n                        case TypeCode.Int16:\n                            return Math.Min((Byte) a, (Int16) b);\n                        case TypeCode.UInt16:\n                            return Math.Min((Byte) a, (UInt16) b);\n                        case TypeCode.Int32:\n                            return Math.Min((Byte) a, (Int32) b);\n                        case TypeCode.UInt32:\n                            return Math.Min((Byte) a, (UInt32) b);\n                        case TypeCode.Int64:\n                            return Math.Min((Byte) a, (Int64) b);\n                        case TypeCode.UInt64:\n                            return Math.Min((Byte) a, (UInt64) b);\n                        case TypeCode.Single:\n                            return Math.Min((Byte) a, (Single) b);\n                        case TypeCode.Double:\n                            return Math.Min((Byte) a, (Double) b);\n                        case TypeCode.Decimal:\n                            return Math.Min((Byte) a, (Decimal) b);\n                    }\n                    break;\n                case TypeCode.SByte:\n                    switch (typeCodeB)\n                    {\n                        case TypeCode.Byte:\n                            return Math.Min((SByte) a, (Byte) b);\n                        case TypeCode.SByte:\n                            return Math.Min((SByte) a, (SByte) b);\n                        case TypeCode.Int16:\n                            return Math.Min((SByte) a, (Int16) b);\n                        case TypeCode.UInt16:\n                            return Math.Min((SByte) a, (UInt16) b);\n                        case TypeCode.Int32:\n                            return Math.Min((SByte) a, (Int32) b);\n                        case TypeCode.UInt32:\n                            return Math.Min((SByte) a, (UInt32) b);\n                        case TypeCode.Int64:\n                            return Math.Min((SByte) a, (Int64) b);\n                        case TypeCode.UInt64:\n                            throw new InvalidOperationException(\n                                &quot;Operator '%' can't be applied to operands of types 'sbyte' and 'ulong'&quot;);\n                        case TypeCode.Single:\n                            return Math.Min((SByte) a, (Single) b);\n                        case TypeCode.Double:\n                            return Math.Min((SByte) a, (Double) b);\n                        case TypeCode.Decimal:\n                            return Math.Min((SByte) a, (Decimal) b);\n                    }\n                    break;\n\n                ...\n\n            }\n            return null; </code></pre>\n\n",
    "PostedDate": "2014-05-12T07:31:57.907-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]