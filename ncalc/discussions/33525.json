[
  {
    "Id": "111103",
    "ThreadId": "33525",
    "Html": "<span style=\"font-size:13px\"><span style=\"font-size:13px\">\r\n<p>In the ECalc version on CodeProject (<a href=\"http://www.codeproject.com/KB/recipes/sota_expression_evaluator.aspx\">http://www.codeproject.com/KB/recipes/sota_expression_evaluator.aspx</a>) I could relatively easily add my own functions by defining a delegate like</p>\r\n<p>&nbsp;private static void e_EvaluateFunction(string name, FunctionArgs args) {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; if (name == &quot;MyFunc1&quot;) { args.Result = MyFunc1(args.Parameters); return; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; if (name == &quot;MyFunc2&quot;) { args.Result = MyFunc2(args.Parameters); return; }<br>\r\n&nbsp;}</p>\r\n<p>and then defining </p>\r\n<p>&nbsp;private static float MyFunc1(params object[] numbers) <br>\r\n&nbsp;{<br>\r\n&nbsp;&nbsp;...<br>\r\n&nbsp;}</p>\r\n<p>which was unaware of being used in the ECalc context. Just convert the arguments to floats or whatever C# type and go. <br>\r\nNow the arguments are of type Evaluant.Calculator.Expression and this no longer works. In my function I have to repeat the whole handling of Parameters etc again for each argument. </p>\r\n<p>Was the old way not better or is there an alternative now?</p>\r\n<p>Tx,</p>\r\n<p>Andriks</p>\r\n</span></span>\r\n",
    "PostedDate": "2008-08-14T07:39:09.267-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "111134",
    "ThreadId": "33525",
    "Html": "Hi Andriks,<br>\r\n<br>\r\nI have found the reason and the alternative. Actually I made this change as the if() function didn't work. Let me explain:<br>\r\n<br>\r\nThe mistake was that the if(a, b, c) function should return &quot;b&quot; if &quot;a&quot; is true, and &quot;c&quot; otherwise. This function is often used when testing divisions by zeeo. For instance, if([x] != 0, 16/[x], 0).<br>\r\nNow imagine [x] is 0. If NCalc was evaluating all parameters, we would always have the exception, before the real if() behaviour is called. Thus this is to the if() function to define when each parameters as to be called, and that's why external functions get Expression instances. Because this could be also you case.<br>\r\n<br>\r\nThough, in your case you prefer to have the pre-evaluated values. I've just implemented a solution for this case. I'll create a release later, but you can already use this technique inside you delegate:<br>\r\n<br>\r\n<p style=\"margin:0cm 0cm 0pt;line-height:normal\"><span style=\"font-size:10pt;color:blue;font-family:Consolas\">public</span><span style=\"font-size:10pt;font-family:Consolas\"> <span style=\"color:blue\">object</span>[] EvaluateParameters()</span></p>\r\n<p style=\"margin:0cm 0cm 0pt;line-height:normal\"><span style=\"font-size:10pt;font-family:Consolas\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt;line-height:normal\"><span style=\"font-size:10pt;font-family:Consolas\">&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">object</span>[] values = <span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>[parameters.Length];</span></p>\r\n<p style=\"margin:0cm 0cm 0pt;line-height:normal\"><span style=\"font-size:10pt;font-family:Consolas\">&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; values.Length; i++)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt;line-height:normal\"><span style=\"font-size:10pt;font-family:Consolas\">&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt;line-height:normal\"><span style=\"font-size:10pt;font-family:Consolas\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; values[i] = parameters[i].Evaluate();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt;line-height:normal\"><span style=\"font-size:10pt;font-family:Consolas\">&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt;line-height:normal\"><span style=\"font-size:10pt;font-family:Consolas\">&nbsp;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt;line-height:normal\"><span style=\"font-size:10pt;font-family:Consolas\">&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">return</span> values;</span></p>\r\n<p style=\"margin:0cm 0cm 10pt\"><span style=\"font-size:10pt;line-height:115%;font-family:Consolas\">}<br>\r\n<br>\r\nThis method is now added to FunctionArgs. In the meantime you can add it as a static one inside your code and to take your example have this:<br>\r\n<br>\r\n&nbsp;private static void e_EvaluateFunction(string name, FunctionArgs args) {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; if (name == &quot;MyFunc1&quot;) { args.Result = MyFunc1(<span style=\"font-size:13px;font-family:Consolas\">EvaluateParameters(</span>args.Parameters)); return; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; if (name == &quot;MyFunc2&quot;) { args.Result = MyFunc2(<span style=\"font-size:13px;font-family:Consolas\">EvaluateParameters(</span>args.Parameters)); return; }<br>\r\n&nbsp;}<br>\r\n<br>\r\nHope this helps,<br>\r\n<br>\r\nSébastien</span></p>\r\n",
    "PostedDate": "2008-08-14T09:12:52.307-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "111744",
    "ThreadId": "33525",
    "Html": "Hi Sébastien,<br>\r\n<br>\r\nI see your point. Indeed if you use the IF function it is handy <strong>not</strong> to have all arguments evaluated beforehand ;-)<br>\r\n<br>\r\nI can live with the EvaluateParameters function and it's use.<br>\r\n<br>\r\nThank you,<br>\r\n<br>\r\nAndriks\r\n",
    "PostedDate": "2008-08-18T04:27:40.61-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]